
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 26 2025 00:05:21

// Verification Directory fv/synth_wrapper 

module fulladder(X, Y, Ci, S, Co);
  input X, Y, Ci;
  output S, Co;
  wire X, Y, Ci;
  wire S, Co;
  wire w1, w2, w3;
  xor G1 (w1, X, Y);
  xor G2 (S, w1, Ci);
  and G3 (w2, w1, Ci);
  and G4 (w3, X, Y);
  or G5 (Co, w2, w3);
endmodule

module ripple_adder(X, Y, S, Co, Cin);
  input [3:0] X, Y;
  input Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire Cin;
  wire [3:0] S;
  wire Co;
  wire w1, w2, w3;
  fulladder u1(X[0], Y[0], Cin, S[0], w1);
  fulladder u2(X[1], Y[1], w1, S[1], w2);
  fulladder u3(X[2], Y[2], w2, S[2], w3);
  fulladder u4(X[3], Y[3], w3, S[3], Co);
endmodule

module sub(a, b, out, Co);
  input [3:0] a, b;
  output [3:0] out;
  output Co;
  wire [3:0] a, b;
  wire [3:0] out;
  wire Co;
  wire [3:0] b_inv;
  ripple_adder sub(.X (a), .Y (b_inv), .S (out), .Co (Co), .Cin (1'b1));
  not g1 (b_inv[3], b[3]);
  not g2 (b_inv[2], b[2]);
  not g3 (b_inv[1], b[1]);
  not g4 (b_inv[0], b[0]);
endmodule

module gt_unsigned(A, B, Z);
  input [3:0] A;
  input [1:0] B;
  output Z;
  wire [3:0] A;
  wire [1:0] B;
  wire Z;
  wire n_18, n_21, n_23, n_24, n_25, n_26, n_27, n_34;
  wire n_37;
  not g4 (n_18, A[1]);
  nand g10 (n_24, n_21, A[0]);
  nor g11 (n_23, B[1], n_18);
  nand g12 (n_26, B[1], n_18);
  not g17 (n_25, n_23);
  nand g18 (n_27, n_24, n_25);
  nand g19 (n_34, n_26, n_27);
  nor g23 (n_37, A[2], A[3]);
  nand g27 (Z, n_37, n_34);
  not g37 (n_21, B[0]);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module shift_right(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  wire [3:0] stage1;
  wire [3:0] stage2;
  wire n_10;
  gt_unsigned gt_17_18(.A (b), .B (2'b11), .Z (n_10));
  bmux mux_13_18(.ctl (b[1]), .in_0 (a), .in_1 ({2'b00, a[3:2]}), .z
       (stage1));
  bmux mux_15_18(.ctl (b[0]), .in_0 (stage1), .in_1 ({1'b0,
       stage1[3:1]}), .z (stage2));
  bmux mux_17_18(.ctl (n_10), .in_0 (stage2), .in_1 (4'b0000), .z
       (out));
endmodule

module shift_left(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  wire [3:0] stage1;
  wire [3:0] stage2;
  wire n_10;
  gt_unsigned gt_17_18(.A (b), .B (2'b11), .Z (n_10));
  bmux mux_13_18(.ctl (b[1]), .in_0 (a), .in_1 ({a[1:0], 2'b00}), .z
       (stage1));
  bmux mux_15_18(.ctl (b[0]), .in_0 (stage1), .in_1 ({stage1[2:0],
       1'b0}), .z (stage2));
  bmux mux_17_18(.ctl (n_10), .in_0 (stage2), .in_1 (4'b0000), .z
       (out));
endmodule

module case_box(in_0, out_0);
  input [2:0] in_0;
  output [7:0] out_0;
  wire [2:0] in_0;
  wire [7:0] out_0;
  wire n_25, n_27, n_39, n_60, n_61, n_62, n_63, n_64;
  wire n_65, n_66, n_67;
  nand g1 (n_25, n_60, n_61, n_62);
  nand g2 (n_27, n_60, n_61, in_0[0]);
  nand g3 (n_63, n_60, in_0[1], n_62);
  nand g4 (n_64, n_60, in_0[1], in_0[0]);
  nand g5 (n_65, in_0[2], n_61, n_62);
  nand g6 (n_66, in_0[2], n_61, in_0[0]);
  nand g7 (n_67, in_0[2], in_0[1], n_62);
  nand g8 (n_39, in_0[2], in_0[1], in_0[0]);
  not g9 (out_0[7], n_25);
  not g10 (out_0[6], n_27);
  not g11 (out_0[5], n_63);
  not g12 (out_0[4], n_64);
  not g13 (out_0[3], n_65);
  not g14 (out_0[2], n_66);
  not g15 (out_0[1], n_67);
  not g16 (out_0[0], n_39);
  not g17 (n_60, in_0[2]);
  not g18 (n_61, in_0[1]);
  not g19 (n_62, in_0[0]);
endmodule

module mux(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [7:0] ctl;
  input [2:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [2:0] z;
  wire [7:0] ctl;
  wire [2:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [2:0] z;
  CDN_mux8 g1(.sel0 (ctl[7]), .data0 (in_0[2]), .sel1 (ctl[6]), .data1
       (in_1[2]), .sel2 (ctl[5]), .data2 (in_2[2]), .sel3 (ctl[4]),
       .data3 (in_3[2]), .sel4 (ctl[3]), .data4 (in_4[2]), .sel5
       (ctl[2]), .data5 (in_5[2]), .sel6 (ctl[1]), .data6 (in_6[2]),
       .sel7 (ctl[0]), .data7 (in_7[2]), .z (z[2]));
  CDN_mux8 g4(.sel0 (ctl[7]), .data0 (in_0[1]), .sel1 (ctl[6]), .data1
       (in_1[1]), .sel2 (ctl[5]), .data2 (in_2[1]), .sel3 (ctl[4]),
       .data3 (in_3[1]), .sel4 (ctl[3]), .data4 (in_4[1]), .sel5
       (ctl[2]), .data5 (in_5[1]), .sel6 (ctl[1]), .data6 (in_6[1]),
       .sel7 (ctl[0]), .data7 (in_7[1]), .z (z[1]));
  CDN_mux8 g5(.sel0 (ctl[7]), .data0 (in_0[0]), .sel1 (ctl[6]), .data1
       (in_1[0]), .sel2 (ctl[5]), .data2 (in_2[0]), .sel3 (ctl[4]),
       .data3 (in_3[0]), .sel4 (ctl[3]), .data4 (in_4[0]), .sel5
       (ctl[2]), .data5 (in_5[0]), .sel6 (ctl[1]), .data6 (in_6[0]),
       .sel7 (ctl[0]), .data7 (in_7[0]), .z (z[0]));
endmodule

module mux_9(ctl, in_0, in_1, in_2, z);
  input [2:0] ctl;
  input in_0, in_1, in_2;
  output z;
  wire [2:0] ctl;
  wire in_0, in_1, in_2;
  wire z;
  CDN_mux3 g1(.sel0 (ctl[2]), .data0 (in_0), .sel1 (ctl[1]), .data1
       (in_1), .sel2 (ctl[0]), .data2 (in_2), .z (z));
endmodule

module mux_10(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [7:0] ctl;
  input [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [3:0] z;
  wire [7:0] ctl;
  wire [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [3:0] z;
  CDN_mux8 g1(.sel0 (ctl[7]), .data0 (in_0[3]), .sel1 (ctl[6]), .data1
       (in_1[3]), .sel2 (ctl[5]), .data2 (in_2[3]), .sel3 (ctl[4]),
       .data3 (in_3[3]), .sel4 (ctl[3]), .data4 (in_4[3]), .sel5
       (ctl[2]), .data5 (in_5[3]), .sel6 (ctl[1]), .data6 (in_6[3]),
       .sel7 (ctl[0]), .data7 (in_7[3]), .z (z[3]));
  CDN_mux8 g5(.sel0 (ctl[7]), .data0 (in_0[2]), .sel1 (ctl[6]), .data1
       (in_1[2]), .sel2 (ctl[5]), .data2 (in_2[2]), .sel3 (ctl[4]),
       .data3 (in_3[2]), .sel4 (ctl[3]), .data4 (in_4[2]), .sel5
       (ctl[2]), .data5 (in_5[2]), .sel6 (ctl[1]), .data6 (in_6[2]),
       .sel7 (ctl[0]), .data7 (in_7[2]), .z (z[2]));
  CDN_mux8 g6(.sel0 (ctl[7]), .data0 (in_0[1]), .sel1 (ctl[6]), .data1
       (in_1[1]), .sel2 (ctl[5]), .data2 (in_2[1]), .sel3 (ctl[4]),
       .data3 (in_3[1]), .sel4 (ctl[3]), .data4 (in_4[1]), .sel5
       (ctl[2]), .data5 (in_5[1]), .sel6 (ctl[1]), .data6 (in_6[1]),
       .sel7 (ctl[0]), .data7 (in_7[1]), .z (z[1]));
  CDN_mux8 g7(.sel0 (ctl[7]), .data0 (in_0[0]), .sel1 (ctl[6]), .data1
       (in_1[0]), .sel2 (ctl[5]), .data2 (in_2[0]), .sel3 (ctl[4]),
       .data3 (in_3[0]), .sel4 (ctl[3]), .data4 (in_4[0]), .sel5
       (ctl[2]), .data5 (in_5[0]), .sel6 (ctl[1]), .data6 (in_6[0]),
       .sel7 (ctl[0]), .data7 (in_7[0]), .z (z[0]));
endmodule

module alu(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] result_add;
  wire [3:0] result_sub;
  wire [3:0] result_shift_right;
  wire [3:0] result_shift_left;
  wire [3:0] result_and;
  wire [3:0] result_or;
  wire [3:0] result_xor;
  wire [3:0] result_not;
  wire _X_, carry_add, carry_sub, n_5, n_14, n_15, n_16, n_27;
  wire n_28, n_29, n_30, n_31, n_32, n_33, n_34, n_35;
  wire n_36, n_37, n_38, n_39, n_40, n_41;
  ripple_adder add(.X (a), .Y (b), .S (result_add), .Co (carry_add),
       .Cin (1'b0));
  sub sub(.a (a), .b (b), .out (result_sub), .Co (carry_sub));
  shift_right shift_right(.a (a), .b (b), .out (result_shift_right));
  shift_left shift_left(.a (a), .b (b), .out (result_shift_left));
  case_box ctl_op_50_9(.in_0 (op), .out_0 ({n_27, n_28, n_29, n_30,
       n_31, n_32, n_33, n_34}));
  mux mux_carry_50_9(.ctl ({n_27, n_28, n_29, n_30, n_31, n_32, n_33,
       n_34}), .in_0 ({2'b01, _X_}), .in_1 ({2'b10, _X_}), .in_2
       (3'b000), .in_3 (3'b000), .in_4 (3'b000), .in_5 (3'b000), .in_6
       (3'b000), .in_7 (3'b000), .z ({n_36, n_35, n_41}));
  mux_9 mux_carry_50_6(.ctl ({n_37, n_38, n_39}), .in_0 (carry_add),
       .in_1 (n_40), .in_2 (n_41), .z (carry));
  mux_10 mux_result_50_9(.ctl ({n_27, n_28, n_29, n_30, n_31, n_32,
       n_33, n_34}), .in_0 (result_add), .in_1 (result_sub), .in_2
       (result_and), .in_3 (result_or), .in_4 (result_xor), .in_5
       (result_not), .in_6 (result_shift_right), .in_7
       (result_shift_left), .z (result));
  not g5 (n_40, carry_sub);
  CDN_dc logicX_inst(.cf (1'b0), .dcf (1'b1), .z (_X_));
  and g1 (result_and[0], a[0], b[0]);
  and g7 (result_and[1], a[1], b[1]);
  and g8 (result_and[2], a[2], b[2]);
  and g9 (result_and[3], a[3], b[3]);
  or g10 (result_or[0], a[0], b[0]);
  or g2 (result_or[1], a[1], b[1]);
  or g11 (result_or[2], a[2], b[2]);
  or g12 (result_or[3], a[3], b[3]);
  xor g13 (result_xor[0], a[0], b[0]);
  xor g14 (result_xor[1], a[1], b[1]);
  xor g3 (result_xor[2], a[2], b[2]);
  xor g15 (result_xor[3], a[3], b[3]);
  not g16 (result_not[3], a[3]);
  not g17 (result_not[2], a[2]);
  not g18 (result_not[1], a[1]);
  not g4 (result_not[0], a[0]);
  nand g20 (n_5, n_35, n_14);
  nand g21 (n_16, n_15, n_36);
  not g22 (n_37, n_5);
  not g23 (n_38, n_16);
  nor g24 (n_39, n_38, n_37);
  not g25 (n_14, n_36);
  not g26 (n_15, n_35);
endmodule

module bmux_13(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module synth_wrapper(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] a_reg;
  wire [3:0] b_reg;
  wire [2:0] op_reg;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, carry_reg_70, n_6, n_13;
  wire n_14, n_15, n_16, n_17, n_18, n_19, n_20, n_21;
  wire n_22, n_23, n_24, n_29, n_30, n_31, n_32, n_33;
  wire n_34, n_35, n_36, n_37, n_38, n_39, n_40, n_44;
  wire n_45, n_46, n_47, n_48, n_49, n_50, n_51, n_52;
  wire \result_reg[0]_58 , \result_reg[1]_59 , \result_reg[2]_60 ,
       \result_reg[3]_61 ;
  alu alu(.clk (clk), .rst_n (rst_n), .a (a_reg), .b (b_reg), .op
       (op_reg), .result ({\result_reg[3]_61 , \result_reg[2]_60 ,
       \result_reg[1]_59 , \result_reg[0]_58 }), .carry (carry_reg_70));
  bmux_13 mux_carry_18_7(.ctl (n_6), .in_0 (carry_reg_70), .in_1
       (1'b0), .z (UNCONNECTED));
  bmux mux_result_18_7(.ctl (n_6), .in_0 ({\result_reg[3]_61 ,
       \result_reg[2]_60 , \result_reg[1]_59 , \result_reg[0]_58 }),
       .in_1 (4'b0000), .z ({UNCONNECTED3, UNCONNECTED2, UNCONNECTED1,
       UNCONNECTED0}));
  not g8 (n_13, a[0]);
  not g9 (n_14, a[1]);
  not g10 (n_15, a[2]);
  not g11 (n_16, a[3]);
  and g12 (n_17, n_6, a[0]);
  and g13 (n_18, n_6, n_13);
  and g14 (n_19, n_6, a[1]);
  and g15 (n_20, n_6, n_14);
  and g16 (n_21, n_6, a[2]);
  and g17 (n_22, n_6, n_15);
  and g18 (n_23, n_6, a[3]);
  and g19 (n_24, n_6, n_16);
  not g20 (n_29, b[0]);
  not g21 (n_30, b[1]);
  not g22 (n_31, b[2]);
  not g23 (n_32, b[3]);
  and g24 (n_33, n_6, b[0]);
  and g25 (n_34, n_6, n_29);
  and g26 (n_35, n_6, b[1]);
  and g27 (n_36, n_6, n_30);
  and g28 (n_37, n_6, b[2]);
  and g29 (n_38, n_6, n_31);
  and g30 (n_39, n_6, b[3]);
  and g31 (n_40, n_6, n_32);
  not g32 (n_44, op[0]);
  not g33 (n_45, op[1]);
  not g34 (n_46, op[2]);
  and g35 (n_47, n_6, op[0]);
  and g36 (n_48, n_6, n_44);
  and g37 (n_49, n_6, op[1]);
  and g38 (n_50, n_6, n_45);
  and g39 (n_51, n_6, op[2]);
  and g40 (n_52, n_6, n_46);
  not g1 (n_6, rst_n);
  CDN_flop \result_reg[0] (.clk (clk), .d (\result_reg[0]_58 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (\result_reg[1]_59 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (\result_reg[2]_60 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (\result_reg[3]_61 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
  CDN_flop carry_reg(.clk (clk), .d (carry_reg_70), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  CDN_flop \a_reg_reg[0] (.clk (clk), .d (a[0]), .sena (1'b1), .aclr
       (n_18), .apre (n_17), .srl (1'b0), .srd (1'b0), .q (a_reg[0]));
  CDN_flop \a_reg_reg[1] (.clk (clk), .d (a[1]), .sena (1'b1), .aclr
       (n_20), .apre (n_19), .srl (1'b0), .srd (1'b0), .q (a_reg[1]));
  CDN_flop \a_reg_reg[2] (.clk (clk), .d (a[2]), .sena (1'b1), .aclr
       (n_22), .apre (n_21), .srl (1'b0), .srd (1'b0), .q (a_reg[2]));
  CDN_flop \a_reg_reg[3] (.clk (clk), .d (a[3]), .sena (1'b1), .aclr
       (n_24), .apre (n_23), .srl (1'b0), .srd (1'b0), .q (a_reg[3]));
  CDN_flop \b_reg_reg[0] (.clk (clk), .d (b[0]), .sena (1'b1), .aclr
       (n_34), .apre (n_33), .srl (1'b0), .srd (1'b0), .q (b_reg[0]));
  CDN_flop \b_reg_reg[1] (.clk (clk), .d (b[1]), .sena (1'b1), .aclr
       (n_36), .apre (n_35), .srl (1'b0), .srd (1'b0), .q (b_reg[1]));
  CDN_flop \b_reg_reg[2] (.clk (clk), .d (b[2]), .sena (1'b1), .aclr
       (n_38), .apre (n_37), .srl (1'b0), .srd (1'b0), .q (b_reg[2]));
  CDN_flop \b_reg_reg[3] (.clk (clk), .d (b[3]), .sena (1'b1), .aclr
       (n_40), .apre (n_39), .srl (1'b0), .srd (1'b0), .q (b_reg[3]));
  CDN_flop \op_reg_reg[0] (.clk (clk), .d (op[0]), .sena (1'b1), .aclr
       (n_48), .apre (n_47), .srl (1'b0), .srd (1'b0), .q (op_reg[0]));
  CDN_flop \op_reg_reg[1] (.clk (clk), .d (op[1]), .sena (1'b1), .aclr
       (n_50), .apre (n_49), .srl (1'b0), .srd (1'b0), .q (op_reg[1]));
  CDN_flop \op_reg_reg[2] (.clk (clk), .d (op[2]), .sena (1'b1), .aclr
       (n_52), .apre (n_51), .srl (1'b0), .srd (1'b0), .q (op_reg[2]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_dc(cf, dcf, z);
  input cf, dcf;
  output z;
  wire cf, dcf;
  wire z;
  assign z = dcf ? 1'bx : cf;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux8(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or sel7 or
         data0 or data1 or data2 or data3 or data4 or data5 or data6 or
         data7) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6, sel7})
       8'b10000000: z = data0;
       8'b01000000: z = data1;
       8'b00100000: z = data2;
       8'b00010000: z = data3;
       8'b00001000: z = data4;
       8'b00000100: z = data5;
       8'b00000010: z = data6;
       8'b00000001: z = data7;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux8(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  and a_7 (w_7, sel7, data7);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
