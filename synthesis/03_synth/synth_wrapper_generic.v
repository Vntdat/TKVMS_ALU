
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 26 2025 00:05:22

// Verification Directory fv/synth_wrapper 

module fulladder(X, Y, Ci, S, Co);
  input X, Y, Ci;
  output S, Co;
  wire X, Y, Ci;
  wire S, Co;
  wire w1, w2, w3;
  xor G1 (w1, X, Y);
  xor G2 (S, w1, Ci);
  and G3 (w2, w1, Ci);
  and G4 (w3, X, Y);
  or G5 (Co, w2, w3);
endmodule

module ripple_adder(X, Y, S, Co, Cin);
  input [3:0] X, Y;
  input Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire Cin;
  wire [3:0] S;
  wire Co;
  wire w1, w2, w3;
  fulladder u1(X[0], Y[0], Cin, S[0], w1);
  fulladder u2(X[1], Y[1], w1, S[1], w2);
  fulladder u3(X[2], Y[2], w2, S[2], w3);
  fulladder u4(X[3], Y[3], w3, S[3], Co);
endmodule

module gt_unsigned(A, B, Z);
  input [3:0] A;
  input [1:0] B;
  output Z;
  wire [3:0] A;
  wire [1:0] B;
  wire Z;
  wire n_18, n_21, n_23, n_24, n_25, n_26, n_27, n_34;
  wire n_37;
  nand g10 (n_24, n_21, A[0]);
  nor g11 (n_23, B[1], n_18);
  nand g12 (n_26, B[1], n_18);
  not g17 (n_25, n_23);
  nand g18 (n_27, n_24, n_25);
  nand g19 (n_34, n_26, n_27);
  nor g23 (n_37, A[2], A[3]);
  nand g27 (Z, n_37, n_34);
  not g37 (n_21, B[0]);
  not g4 (n_18, A[1]);
endmodule

module shift_left(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  wire [3:0] stage1;
  wire n_2, n_4, n_7, n_10, n_23, n_25, n_96, n_97;
  wire n_98, n_99, n_100, n_101, n_102, n_122, n_123, n_124;
  gt_unsigned gt_17_18(.A (b), .B (2'b11), .Z (n_10));
  CDN_bmux2 mux_13_18_g2(.sel0 (b[1]), .data0 (a[2]), .data1 (a[0]), .z
       (stage1[2]));
  not g1 (n_2, a[1]);
  or g2 (n_4, n_2, n_10);
  or g3 (n_98, n_4, b[1]);
  not g4 (n_7, a[0]);
  or g5 (n_96, n_7, n_10);
  or g6 (n_97, n_96, b[1]);
  CDN_bmux2 g7(.sel0 (b[0]), .data0 (n_98), .data1 (n_97), .z (n_99));
  not g8 (out[1], n_99);
  not g9 (n_100, a[3]);
  or g10 (n_122, n_100, n_10);
  CDN_bmux2 g11(.sel0 (b[1]), .data0 (n_122), .data1 (n_4), .z (n_101));
  not g12 (n_123, stage1[2]);
  or g13 (n_124, n_123, n_10);
  CDN_bmux2 g14(.sel0 (b[0]), .data0 (n_101), .data1 (n_124), .z
       (n_102));
  not g15 (out[3], n_102);
  CDN_bmux2 g16(.sel0 (b[0]), .data0 (n_124), .data1 (n_98), .z (n_23));
  not g17 (out[2], n_23);
  or g18 (n_25, n_97, b[0]);
  not g19 (out[0], n_25);
endmodule

module shift_right(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  wire [3:0] stage1;
  wire n_2, n_4, n_7, n_10, n_23, n_25, n_96, n_97;
  wire n_98, n_99, n_100, n_101, n_102, n_122, n_123, n_124;
  gt_unsigned gt_17_18(.A (b), .B (2'b11), .Z (n_10));
  CDN_bmux2 mux_13_18_g3(.sel0 (b[1]), .data0 (a[1]), .data1 (a[3]), .z
       (stage1[1]));
  not g1 (n_2, a[2]);
  or g2 (n_4, n_2, n_10);
  or g3 (n_98, n_4, b[1]);
  not g4 (n_7, a[3]);
  or g5 (n_96, n_7, n_10);
  or g6 (n_97, n_96, b[1]);
  CDN_bmux2 g7(.sel0 (b[0]), .data0 (n_98), .data1 (n_97), .z (n_99));
  not g8 (out[2], n_99);
  not g9 (n_100, a[0]);
  or g10 (n_122, n_100, n_10);
  CDN_bmux2 g11(.sel0 (b[1]), .data0 (n_122), .data1 (n_4), .z (n_101));
  not g12 (n_123, stage1[1]);
  or g13 (n_124, n_123, n_10);
  CDN_bmux2 g14(.sel0 (b[0]), .data0 (n_101), .data1 (n_124), .z
       (n_102));
  not g15 (out[0], n_102);
  or g16 (n_23, n_97, b[0]);
  not g17 (out[3], n_23);
  CDN_bmux2 g18(.sel0 (b[0]), .data0 (n_124), .data1 (n_98), .z (n_25));
  not g19 (out[1], n_25);
endmodule

module sub(a, b, out, Co);
  input [3:0] a, b;
  output [3:0] out;
  output Co;
  wire [3:0] a, b;
  wire [3:0] out;
  wire Co;
  wire [3:0] b_inv;
  ripple_adder sub(.X (a), .Y (b_inv), .S (out), .Co (Co), .Cin (1'b1));
  not g1 (b_inv[3], b[3]);
  not g2 (b_inv[2], b[2]);
  not g3 (b_inv[1], b[1]);
  not g4 (b_inv[0], b[0]);
endmodule

module alu(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] result_add;
  wire [3:0] result_xor;
  wire [3:0] result_shift_left;
  wire [3:0] result_shift_right;
  wire [3:0] result_sub;
  wire [3:0] result_and;
  wire [3:0] result_or;
  wire carry_add, carry_sub, n_37, n_38, n_39, n_40, n_59, n_60;
  wire n_61, n_62, n_63, n_64, n_65, n_66, n_67, n_68;
  wire n_69, n_70, n_71, n_72, n_73, n_74, n_75, n_76;
  wire n_77, n_78, n_80, n_81, n_82, n_84, n_85, n_86;
  wire n_87, n_88, n_89, n_90, n_91, n_92, n_93, n_94;
  wire n_95, n_96, n_97, n_99, n_100, n_101, n_102, n_103;
  wire n_104, n_105, n_106, n_107, n_108, n_109, n_110, n_111;
  wire n_112, n_114, n_115, n_116, n_117, n_118, n_119, n_120;
  wire n_121, n_122, n_123, n_124, n_125, n_126, n_127, n_145;
  wire n_212, n_213, n_214, n_215, n_216, n_217, n_218, n_219;
  wire n_220, n_221, n_222, n_223, n_224, n_225, n_226, n_227;
  wire n_228, n_229, n_230, n_231, n_232, n_233, n_234, n_235;
  wire n_236, n_237, n_238, n_239, n_240, n_241, n_242, n_243;
  wire n_244, n_245, n_246, n_247, n_248, n_249, n_250, n_251;
  wire n_252, n_253, n_254, n_255, n_256, n_257, n_258, n_259;
  wire n_260, n_261, n_262, n_263, n_264, n_265, n_266, n_267;
  wire n_268, n_269, n_270, n_271, n_272, n_273, n_274;
  ripple_adder add(.X (a), .Y (b), .S (result_add), .Co (carry_add),
       .Cin (1'b0));
  shift_left shift_left(.a (a), .b (b), .out (result_shift_left));
  shift_right shift_right(.a (a), .b (b), .out (result_shift_right));
  sub sub(.a (a), .b (b), .out (result_sub), .Co (carry_sub));
  nor g106 (n_103, n_101, n_102);
  nor g107 (n_106, n_104, n_105);
  nor g121 (n_117, n_115, n_116);
  nor g122 (n_120, n_118, n_119);
  nor g126 (n_127, n_125, n_126);
  nand g127 (result[0], n_124, n_127);
  xor g13 (result_xor[0], a[0], b[0]);
  xor g14 (result_xor[1], a[1], b[1]);
  xor g15 (result_xor[3], a[3], b[3]);
  xor g3 (result_xor[2], a[2], b[2]);
  not g5 (n_40, carry_sub);
  nor g67 (n_67, n_64, n_66);
  nor g68 (n_73, n_70, n_72);
  nor g82 (n_86, n_84, n_85);
  nor g83 (n_89, n_87, n_88);
  nor g86 (n_95, n_93, n_94);
  nand g90 (n_60, op[0], n_59);
  nand g94 (n_65, n_62, op[0]);
  nand g97 (n_69, n_68, op[0]);
  CDN_mux3 mux_carry_50_6_g1(.sel0 (n_37), .data0 (carry_add), .sel1
       (n_38), .data1 (n_40), .sel2 (n_39), .data2 (1'b0), .z (carry));
  nor g33 (n_37, op[0], n_39);
  not g35 (n_38, n_145);
  nor g42 (n_105, n_69, a[1]);
  nor g43 (n_119, n_69, a[0]);
  nor g44 (n_70, n_69, a[3]);
  nor g45 (n_87, n_69, a[2]);
  not g297 (n_212, op[0]);
  not g298 (n_213, a[1]);
  not g299 (n_214, a[0]);
  not g300 (n_215, a[3]);
  not g301 (n_216, a[2]);
  not g302 (n_217, b[1]);
  not g303 (n_218, op[1]);
  not g304 (n_219, op[2]);
  not g305 (n_220, b[0]);
  not g306 (n_221, b[3]);
  not g307 (n_222, b[2]);
  not g308 (n_223, result_xor[1]);
  not g309 (n_224, result_xor[0]);
  not g310 (n_225, result_shift_right[0]);
  not g311 (n_226, result_shift_left[0]);
  not g312 (n_227, result_xor[3]);
  not g313 (n_228, result_xor[2]);
  not g314 (n_229, result_shift_left[2]);
  not g315 (n_230, result_shift_right[1]);
  not g316 (n_231, result_shift_left[1]);
  not g317 (n_232, result_shift_right[3]);
  not g318 (n_233, result_shift_left[3]);
  not g319 (n_234, result_shift_right[2]);
  not g320 (n_235, result_sub[0]);
  not g321 (n_236, result_add[0]);
  not g322 (n_237, result_add[2]);
  not g323 (n_238, result_add[1]);
  not g324 (n_239, result_sub[1]);
  not g325 (n_240, result_sub[3]);
  not g326 (n_241, result_add[3]);
  not g327 (n_242, result_sub[2]);
  nor g328 (result_and[1], n_213, n_217);
  not g329 (n_243, result_and[1]);
  nor g330 (n_62, op[2], n_218);
  nand g331 (n_63, n_62, n_212);
  nor g332 (n_101, n_243, n_63);
  nand g333 (result_or[1], n_213, n_217);
  not g334 (n_244, result_or[1]);
  nor g335 (n_102, n_65, n_244);
  not g336 (n_245, n_103);
  nor g337 (n_68, n_219, op[1]);
  nand g338 (n_71, n_68, n_212);
  nor g339 (n_104, n_223, n_71);
  not g340 (n_246, n_106);
  nor g341 (result_and[0], n_214, n_220);
  not g342 (n_247, result_and[0]);
  nor g343 (n_115, n_247, n_63);
  nand g344 (result_or[0], n_214, n_220);
  not g345 (n_248, result_or[0]);
  nor g346 (n_116, n_65, n_248);
  not g347 (n_249, n_117);
  nor g348 (n_118, n_224, n_71);
  not g349 (n_250, n_120);
  nor g350 (n_59, n_219, n_218);
  nand g351 (n_75, n_59, n_212);
  nor g352 (n_125, n_225, n_75);
  nor g353 (n_126, n_60, n_226);
  nand g354 (n_39, n_219, n_218);
  not g355 (n_251, n_39);
  nand g356 (n_145, n_251, op[0]);
  nor g357 (n_114, n_235, n_145);
  not g358 (n_252, n_37);
  nor g359 (n_122, n_236, n_252);
  nor g360 (n_121, n_249, n_250);
  not g361 (n_253, n_121);
  nor g362 (n_123, n_122, n_253);
  not g363 (n_254, n_123);
  nor g364 (n_124, n_114, n_254);
  nor g365 (result_and[3], n_215, n_221);
  not g366 (n_255, result_and[3]);
  nor g367 (n_64, n_255, n_63);
  nand g368 (result_or[3], n_215, n_221);
  not g369 (n_256, result_or[3]);
  nor g370 (n_66, n_65, n_256);
  not g371 (n_257, n_67);
  nor g372 (n_72, n_227, n_71);
  not g373 (n_258, n_73);
  nor g374 (result_and[2], n_216, n_222);
  not g375 (n_259, result_and[2]);
  nor g376 (n_84, n_259, n_63);
  nand g377 (result_or[2], n_216, n_222);
  not g378 (n_260, result_or[2]);
  nor g379 (n_85, n_65, n_260);
  not g380 (n_261, n_86);
  nor g381 (n_88, n_228, n_71);
  not g382 (n_262, n_89);
  nor g383 (n_93, n_60, n_229);
  nor g384 (n_94, n_237, n_252);
  not g385 (n_263, n_95);
  nor g386 (n_110, n_230, n_75);
  nor g387 (n_100, n_60, n_231);
  nor g388 (n_76, n_232, n_75);
  nor g389 (n_61, n_60, n_233);
  nor g390 (n_91, n_234, n_75);
  nor g391 (n_108, n_238, n_252);
  nor g392 (n_99, n_239, n_145);
  not g393 (n_264, n_99);
  nor g394 (n_82, n_240, n_145);
  not g395 (n_265, n_82);
  nor g396 (n_80, n_241, n_252);
  nor g397 (n_97, n_242, n_145);
  not g398 (n_266, n_97);
  nor g399 (n_107, n_245, n_246);
  not g400 (n_267, n_107);
  nor g401 (n_74, n_257, n_258);
  not g402 (n_268, n_74);
  nor g403 (n_90, n_261, n_262);
  not g404 (n_269, n_90);
  nor g405 (n_109, n_108, n_267);
  not g406 (n_270, n_109);
  nor g407 (n_77, n_76, n_268);
  not g408 (n_271, n_77);
  nor g409 (n_92, n_91, n_269);
  not g410 (n_272, n_92);
  nor g411 (n_111, n_110, n_270);
  not g412 (n_273, n_111);
  nor g413 (n_78, n_61, n_271);
  not g414 (n_274, n_78);
  nor g415 (n_96, n_263, n_272);
  nand g416 (result[2], n_266, n_96);
  nor g417 (n_112, n_100, n_273);
  nor g418 (n_81, n_80, n_274);
  nand g419 (result[1], n_264, n_112);
  nand g420 (result[3], n_265, n_81);
endmodule

module synth_wrapper(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] a_reg;
  wire [3:0] b_reg;
  wire [2:0] op_reg;
  wire carry_reg_70, n_6, n_17, n_18, n_19, n_20, n_21, n_22;
  wire n_23, n_24, n_33, n_34, n_35, n_36, n_37, n_38;
  wire n_39, n_40, n_47, n_48, n_49, n_50, n_51, n_52;
  wire n_164, n_165, n_166, n_167, n_168, n_169, n_170, n_171;
  wire n_172, n_173, n_174, \result_reg[0]_58 , \result_reg[1]_59 ,
       \result_reg[2]_60 , \result_reg[3]_61 ;
  alu alu(.clk (clk), .rst_n (1'b0), .a (a_reg), .b (b_reg), .op
       (op_reg), .result ({\result_reg[3]_61 , \result_reg[2]_60 ,
       \result_reg[1]_59 , \result_reg[0]_58 }), .carry (carry_reg_70));
  CDN_flop \a_reg_reg[0] (.clk (clk), .d (a[0]), .sena (1'b1), .aclr
       (n_18), .apre (n_17), .srl (1'b0), .srd (1'b0), .q (a_reg[0]));
  CDN_flop \a_reg_reg[1] (.clk (clk), .d (a[1]), .sena (1'b1), .aclr
       (n_20), .apre (n_19), .srl (1'b0), .srd (1'b0), .q (a_reg[1]));
  CDN_flop \a_reg_reg[2] (.clk (clk), .d (a[2]), .sena (1'b1), .aclr
       (n_22), .apre (n_21), .srl (1'b0), .srd (1'b0), .q (a_reg[2]));
  CDN_flop \a_reg_reg[3] (.clk (clk), .d (a[3]), .sena (1'b1), .aclr
       (n_24), .apre (n_23), .srl (1'b0), .srd (1'b0), .q (a_reg[3]));
  CDN_flop \b_reg_reg[0] (.clk (clk), .d (b[0]), .sena (1'b1), .aclr
       (n_34), .apre (n_33), .srl (1'b0), .srd (1'b0), .q (b_reg[0]));
  CDN_flop \b_reg_reg[1] (.clk (clk), .d (b[1]), .sena (1'b1), .aclr
       (n_36), .apre (n_35), .srl (1'b0), .srd (1'b0), .q (b_reg[1]));
  CDN_flop \b_reg_reg[2] (.clk (clk), .d (b[2]), .sena (1'b1), .aclr
       (n_38), .apre (n_37), .srl (1'b0), .srd (1'b0), .q (b_reg[2]));
  CDN_flop \b_reg_reg[3] (.clk (clk), .d (b[3]), .sena (1'b1), .aclr
       (n_40), .apre (n_39), .srl (1'b0), .srd (1'b0), .q (b_reg[3]));
  CDN_flop carry_reg(.clk (clk), .d (carry_reg_70), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  not g1 (n_6, rst_n);
  not g100 (n_168, b[0]);
  not g101 (n_169, b[1]);
  not g102 (n_170, b[2]);
  not g103 (n_171, b[3]);
  not g104 (n_172, op[0]);
  not g105 (n_173, op[1]);
  not g106 (n_174, op[2]);
  nor g107 (n_17, rst_n, n_164);
  nor g108 (n_19, rst_n, n_165);
  nor g109 (n_21, rst_n, n_166);
  nor g110 (n_23, rst_n, n_167);
  nor g111 (n_33, rst_n, n_168);
  nor g112 (n_35, rst_n, n_169);
  nor g113 (n_37, rst_n, n_170);
  nor g114 (n_39, rst_n, n_171);
  nor g115 (n_47, rst_n, n_172);
  nor g116 (n_49, rst_n, n_173);
  nor g117 (n_51, rst_n, n_174);
  nor g41 (n_18, rst_n, a[0]);
  nor g43 (n_20, rst_n, a[1]);
  nor g45 (n_22, rst_n, a[2]);
  nor g47 (n_24, rst_n, a[3]);
  nor g49 (n_34, rst_n, b[0]);
  nor g51 (n_36, rst_n, b[1]);
  nor g53 (n_38, rst_n, b[2]);
  nor g55 (n_40, rst_n, b[3]);
  nor g57 (n_48, rst_n, op[0]);
  nor g59 (n_50, rst_n, op[1]);
  nor g61 (n_52, rst_n, op[2]);
  not g96 (n_164, a[0]);
  not g97 (n_165, a[1]);
  not g98 (n_166, a[2]);
  not g99 (n_167, a[3]);
  CDN_flop \op_reg_reg[0] (.clk (clk), .d (op[0]), .sena (1'b1), .aclr
       (n_48), .apre (n_47), .srl (1'b0), .srd (1'b0), .q (op_reg[0]));
  CDN_flop \op_reg_reg[1] (.clk (clk), .d (op[1]), .sena (1'b1), .aclr
       (n_50), .apre (n_49), .srl (1'b0), .srd (1'b0), .q (op_reg[1]));
  CDN_flop \op_reg_reg[2] (.clk (clk), .d (op[2]), .sena (1'b1), .aclr
       (n_52), .apre (n_51), .srl (1'b0), .srd (1'b0), .q (op_reg[2]));
  CDN_flop \result_reg[0] (.clk (clk), .d (\result_reg[0]_58 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (\result_reg[1]_59 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (\result_reg[2]_60 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (\result_reg[3]_61 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
